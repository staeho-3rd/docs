<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>3RDEYESYSTEM Technical Documentations</title>
        <description>써드아이시스템(3rdeyesys) 기술문서 사이트입니다 - Ncloud 프리미엄 파트너</description>
        <link>https://docs.3rdeyesys.com/</link>
        <atom:link href="https://docs.3rdeyesys.com/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Wed, 04 May 2022 15:25:05 +0900</pubDate>
        <lastBuildDate>Wed, 04 May 2022 15:25:05 +0900</lastBuildDate>
        <generator>Jekyll v4.2.2</generator>
        
        
        <item>
            <title>Cloud DB for PostgreSQL 생성 후 Public 도메인으로 접속하기</title>
            <description>## 지원 클라우드 환경
Ncloud Cloud DB for PostgreSQL이 지원하는 클라우드 환경은 다음과 같습니다.

- 리전(존): 한국, 싱가포르
- VPC만	지원
- 언어: 한국어, 영어, 일본어, 중국어(간체)
- DB 엔진 버전: PostgreSQL 13.3

## DB 생성
[Cloud DB for PostgreSQL] - [DB Server]에서 [DB Server 생성] 버튼을 클릭해 DB를 생성을 시작합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Ncloud Cloud DB for PostgreSQL 생성 후 Public 도메인으로 접속하는 방법&quot; caption=&quot;&quot; %}

### 서버 설정
- DB 엔진: 현재 지원되는 `DB 엔진 버전은 PostgreSQL 13.3` 입니다.  
- 고가용성 지원은 기본 선택 사항인데, 필요하지 않을 경우 체크를 해제하면 됩니다.
- VPC와 Subnet을 선택하고, 미리 생성된 VPC와 Subnet가 없으면 생성 버튼을 클릭합니다.
- `Subnet은 반드시 Public Subnet으로 선택`합니다.
- DB Server 타입은 위쪽에서 확인했던 서버 사양 중에서 원하는 vCPU와 메모리를 선택하면 됩니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;
&amp;#8259; Public 도메인은 Public Subnet에 생성된 DB 서버에서만 이용 신청이 가능합니다. &lt;br /&gt;
&amp;#8259; DB 서버 생성 이후에 Subnet 이전은 불가능합니다.
&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 서버 설정 1&quot; caption=&quot;&quot; %}


- 데이터 스토리지 타입과 암호화 적용 여부를 선택합니다.
- 데이터 스토리지는 기본 10GB로 설정되며 최대 6000GB까지 자동으로 증가합니다.
- DB Server 이름과 DB Service 이름을 입력합니다. DB Service 이름은 DB Server를 역할별로 구분한 그룹의 명칭입니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 서버 설정 2&quot; caption=&quot;&quot; %}

### DB 설정
- USER ID와 암호를 입력합니다. (ID와 암호는 잊어버리지 않도록 잘 보관해야 합니다.)
- 접근제어는 접근을 허용할 IP 대역을 입력합니다.
- DB 접속포트는 기본 포트가 5432 입니다.
- 기본 DB명을 입력하고, Backup 설정을 선택합니다.

{% include warning.html title=&quot;접속포트 설정&quot; content=&quot;DB 접속포트는 한번 설정하면 이후에 변경할 수 없으니 신중하게 설정하셔야 합니다.&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - DB 설정&quot; caption=&quot;&quot; %}

### 최종 확인
지금까지 입력한 값이 이상이 없는지 특히 Public Subnet으로 설정했는지 최종 확인하고, 수정할 부분이 없으면 [생성] 버튼을 클릭합니다.  

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 최종 확인&quot; caption=&quot;&quot; %}

## Public 도메인 설정
DB 생성이 완료되면 아래와 같이 DB의 상세 정보를 확인할 수 있습니다. 

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL Public 도메인으로 접속하기&quot; caption=&quot;&quot; %}

[DB 관리] - [Public 도메인 관리] 메뉴를 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL Public 도메인 생성하기&quot; caption=&quot;&quot; %}

[Public 도메인 신청] 팝업에서 [예] 버튼을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL Public 도메인 신청&quot; caption=&quot;&quot; %}

이제 [Public 도메인]이 생성되었습니다. 생성된 Public 도메인과 ACG 이름이 중요하니 기억해 둡니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL Public 도메인 설정 완료&quot; caption=&quot;&quot; %}

## ACG 설정
[Server] - [ACG]에서 Cloud DB for PostgreSQL 생성 시에 자동으로 생성된 ACG [cloud-postgresql-ooooo]를 선택하고, [ACG 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}


### ACG 규칙 설정
ACG 규칙 설정 창에서 [Inbound] 탭을 선택하고 `[접근 소스]는 [myIp]를 클릭`하고 허용 포트는 5432를 입력하고 [추가] 버튼을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 규칙 설정&quot; caption=&quot;&quot; %}

## pgAdmin 4 다운로드
PostgreSQL에 접속하기 위한 클라이언트 pgAdmin 4를 다운로드 합니다.  

- pgAdmin 다운로드 페이지: &lt;a href=&quot;https://www.pgadmin.org/download/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://www.pgadmin.org/download/&lt;/a&gt;

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 다운로드 페이지&quot; caption=&quot;&quot; %}

다운로드 할 버전은 `pgAdmin 4 v6.7 (released March 14, 2022)` 입니다.
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-25.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 다운로드 버전 선택&quot; caption=&quot;&quot; %}

## pgAdmin 4 설치
pgAdmin 4 클라이언트가 설치되는 기본 경로는 다음과 같습니다.

``` powershell
C:\Users\{Windows User Account}\AppData\Local\Programs\pgAdmin 4\v6
```

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-13.png&quot; width=&quot;500&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 설치하기&quot; caption=&quot;&quot; %}

## pgAdmin 4  실행

### pgAdmin Master Password 입력
pgAdmin 4 접속/관리를 위한 Master Password를 입력합니다. DB와는 관계없고 단지 pgAdmin 클라이언트를 위한 패스워드입니다.

{% include callout_v2.html type=&quot;danger&quot; level=&quot;3&quot; content=&quot;
Master Password는 반드시 입력해야 합니다. 여기서 설정하지 않으면 `internal server error: crypt key is missing` 에러가 발생하면서 서버 관리를 할 수 없게 됩니다.
&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-14.png&quot; width=&quot;834&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 실행 - Master Password 입력&quot; caption=&quot;&quot; %}

### pgAdmin Master Password 재설정
이후에 혹시 Master Password를 잊어버렸을 경우에는 아래와 같이 [**Reset Master Password**] 기능을 이용해 재설정 할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-27.png&quot; width=&quot;834&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 실행 - Master Password 재설정&quot; caption=&quot;&quot; %}

### 서버 추가
pgAdmin에서 [Add New Server] 버튼을 클릭해서 위에서 생성했던 DB서버를 연결합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-15.png&quot; width=&quot;837&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 실행 서버 추가&quot; caption=&quot;&quot; %}

### Name 입력
등록할 DB의 이름을 편하게 입력합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-16.png&quot; width=&quot;837&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 실행 - Name 입력&quot; caption=&quot;&quot; %}

### 연결 정보 입력
- Host name/address: Cloud DB for PostgreSQL 생성 후에 확인한 **`Public 도메인 (pg-oooo-vpc-pub-cdb-kr.ntruss.com)`**을 입력합니다.
- Username: Cloud DB for PostgreSQL 생성 시에 입력한 **USER ID**를 입력합니다.
- Password: Cloud DB for PostgreSQL 생성 시에 입력한 **USER 암호**를 입력합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-17.png&quot; width=&quot;837&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 실행 - 연결 정보 입력&quot; caption=&quot;&quot; %}

## pgAdmin 4 대시보드
연결 정보에 이상이 없고 정상적으로 접속이 되면 아래와 같이 대시보드 화면을 확인할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-18.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 대시보드&quot; caption=&quot;&quot; %}


## DB Service 상세 보기
DB Service 상세 보기에서는 Database 추가/삭제, Config 관리, User 추가/삭제, Backup 설정 등을 관리할 수 있습니다.  
Cloud DB for PostgreSQL을 선택하고 [DB 관리] - [DB Service 상세보기] 메뉴를 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-19.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL DB Service 상세 보기&quot; caption=&quot;&quot; %}

### Database 관리
PostgreSQL DB의 Database를 추가/삭제 할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-20.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL Database 관리&quot; caption=&quot;&quot; %}

### DB User 관리
Cloud DB for PostgreSQL의 DB User를 추가/삭제 할 수 있습니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;
&amp;#8259; PostgreSQL은 `1개의 DB에 1개 계정만 owner`로 지정할 수 있습니다.&lt;br /&gt;
&amp;#8259; 1개의 DB를 여러 계정으로 관리해야 하는 경우는 서브 계정을 만들고 &lt;br /&gt;
&amp;nbsp;&amp;nbsp; owner 계정으로 서브 계정에 별도의 권한을 설정해야 합니다.&lt;br /&gt;&lt;br /&gt;
&amp;#8259; 이때 `계정 생성은 Ncloud 콘솔에서만 가능`합니다. (아래 화면의 DB User 관리 기능)&lt;br /&gt;
&amp;#8259; 그 외의 `권한 설정은 pgAdmin4 웹페이지에서` 설정해야 합니다.
&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-21.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL DB User 관리&quot; caption=&quot;&quot; %}

#### 서브 계정
subid라는 서브 계정을 만들었다고 가정했을 때 아래 화면처럼 Superuser 등의 권한 설정을 할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-22.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 서브 계정&quot; caption=&quot;&quot; %}

### DB 접근 권한 설정
서브 계정의 특정 DB에 대한 접근 권한을 설정하고자 할 경우는 아래와 같이 DB를 선택하고, 마우스 오른쪽 클릭을 한 후 [Properties] 메뉴를 선택합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-23.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL DB 접근 권한 설정&quot; caption=&quot;&quot; %}

[Properties] 설정 화면에서 [Security] 메뉴를 선택하면 계정별로 권한을 설정할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-24.png&quot; width=&quot;750&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 계정 권한 설정&quot; caption=&quot;&quot; %}


## 오류 상황
pgAdmin 4를 사용할 때 아래와 같은 오류가 발생하는 경우가 있습니다.  
이는 `pgAdmin 4 최신 버전인 6.8을 사용할 때 발생하는 것`으로 위에서 안내했 듯이 `6.7 버전을 사용하면 문제가 없습니다`.

{% include warning.html title=&quot;Failed to retrieve data from server.&quot; content=&quot;Request failed with status code 500&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-public-domain-26.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL pgAdmin 4 오류 상황&quot; caption=&quot;&quot; %}


## 참고 URL
1. Ncloud Cloud DB for PostgreSQL 기본 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/clouddbforpostgresql-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/clouddbforpostgresql-overview&lt;/a&gt;

2. pgAdmin 홈페이지
	- &lt;a href=&quot;https://www.pgadmin.org/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;hhttps://www.pgadmin.org/&lt;/a&gt;

3. Cloud DB for PostgreSQL Private 도메인 접속 - CentOS
	- &lt;a href=&quot;/database/ncloud-database-cloud-db-for-postgresql-guide-centos.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-guide-centos.html&lt;/a&gt;

4. Cloud DB for PostgreSQL Private 도메인 접속 - Ubuntu
	- &lt;a href=&quot;/database/ncloud-database-cloud-db-for-postgresql-guide-ubuntu.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-guide-ubuntu.html&lt;/a&gt;</description>
            <pubDate>Tue, 03 May 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-public-domain-guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-public-domain-guide.html</guid>
            
            <category>database</category>
            
            <category>clouddb</category>
            
            <category>vpc</category>
            
            
        </item>
        
        <item>
            <title>VPC환경에서 Cloud DB for PostgreSQL 생성하기 | CentOS</title>
            <description>## 지원 클라우드 환경
Ncloud Cloud DB for PostgreSQL이 지원하는 클라우드 환경은 다음과 같습니다.

- 리전(존): 한국, 싱가포르
- VPC만	지원
- 언어: 한국어, 영어, 일본어, 중국어(간체)
- DB 엔진 버전: PostgreSQL 13.3


## 서버 사양과 요금

*(2022-03-30 기준)*
&lt;table class=&quot;simple_table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th rowspan=&quot;2&quot;&gt;타입&lt;/th&gt;&lt;th colspan=&quot;3&quot;&gt;제공사양&lt;/th&gt;&lt;th&gt;이용 요금&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;th&gt;vCPU&lt;/th&gt;&lt;th&gt;메모리&lt;/th&gt;&lt;th&gt;디스크&lt;/th&gt;&lt;th&gt;시간당/대&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td rowspan=&quot;5&quot;&gt;High CPU&lt;/td&gt;&lt;td&gt;2개&lt;/td&gt;&lt;td&gt;4GB&lt;/td&gt;&lt;td rowspan=&quot;5&quot;&gt;50GB&lt;/td&gt;&lt;td&gt;158원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;4개&lt;/td&gt;&lt;td&gt;8GB&lt;/td&gt;&lt;td&gt;323원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;8개&lt;/td&gt;&lt;td&gt;16GB&lt;/td&gt;&lt;td&gt;653원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;16개&lt;/td&gt;&lt;td&gt;32GB&lt;/td&gt;&lt;td&gt;1,313원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;32개&lt;/td&gt;&lt;td&gt;64GB&lt;/td&gt;&lt;td&gt;2,633원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td rowspan=&quot;5&quot;&gt;Standard&lt;/td&gt;&lt;td&gt;2개&lt;/td&gt;&lt;td&gt;8GB&lt;/td&gt;&lt;td rowspan=&quot;5&quot;&gt;50GB&lt;/td&gt;&lt;td&gt;250원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;4개&lt;/td&gt;&lt;td&gt;16GB&lt;/td&gt;&lt;td&gt;506원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;8개&lt;/td&gt;&lt;td&gt;32GB&lt;/td&gt;&lt;td&gt;1,019원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;16개&lt;/td&gt;&lt;td&gt;64GB&lt;/td&gt;&lt;td&gt;2,045원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;32개&lt;/td&gt;&lt;td&gt;128GB&lt;/td&gt;&lt;td&gt;4,099원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td rowspan=&quot;5&quot;&gt;High Memory&lt;/td&gt;&lt;td&gt;2개&lt;/td&gt;&lt;td&gt;16GB&lt;/td&gt;&lt;td rowspan=&quot;5&quot;&gt;50GB&lt;/td&gt;&lt;td&gt;302원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;4개&lt;/td&gt;&lt;td&gt;32GB&lt;/td&gt;&lt;td&gt;611원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;8개&lt;/td&gt;&lt;td&gt;64GB&lt;/td&gt;&lt;td&gt;1,227원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;16개&lt;/td&gt;&lt;td&gt;128GB&lt;/td&gt;&lt;td&gt;2,462원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;32개&lt;/td&gt;&lt;td&gt;256GB&lt;/td&gt;&lt;td&gt;4,927원&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


## 서버 사양 변경 시 제약 사항
 Cloud DB for PostgreSQL 서버는 타입은 변경할 수 없지만 `메모리 크기는 콘솔 PostgreSQL Server 메뉴에서 스펙 변경 기능을 사용하여 언제든지 변경`할 수 있습니다. 그 외 제약 사항은 아래와 같습니다.

- 같은 타입 내에서만 변경 가능
- 2대 이상의 서버로 구성된 경우(고가용성 사용 및 Read Replica 사용) 모두 동일한 사양으로 변경
- 변경 완료 후 서버가 다시 시작되며 이에 따라 서비스 영향 발생 가능성 존재


## 상세 특징
- DB 엔진 버전: **PostgreSQL 13.3**
- 스토리지: 기본 10GB 데이터 스토리지를 제공하며, 10GB 단위로 6000GB까지 자동으로 용량이 증가
- Multi Zone 구성 제공
- 자동 Fail-over 기본 지원
- 최대 5대까지 Read Replica 확장
- 최대 30일까지 자동 백업 및 보관

## 서버 접근 방법
Cloud DB for PostgreSQL은 현재 다음의 3가지 방법으로 접근 가능한데 여기서는 별도의 Linux 서버를 생성해서 PostgreSQL과 Private 통신을 하는 방법으로 진행하겠습니다.

{% include callout_v2.html type=&quot;info&quot; level=&quot;3&quot; content=&quot;
&amp;#8259; Public Domain으로 접근 (*2022-04-21 업데이트*) &lt;br /&gt;
&amp;#8259; PostgreSQL DB와 Private 통신을 위한 별도의 서버를 생성해서 접근 &lt;br /&gt;
&amp;#8259; SSL VPN을 이용해서 접근
&quot; %}

## DB 생성
[Cloud DB for PostgreSQL] - [DB Server]에서 [DB Server 생성] 버튼을 클릭해 DB를 생성을 시작합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하는 방법&quot; caption=&quot;&quot; %}

### 서버 설정
- DB 엔진: 현재 지원되는 `DB 엔진 버전은 PostgreSQL 13.3` 입니다.  
- 고가용성 지원은 기본 선택 사항인데, 필요하지 않을 경우 체크를 해제하면 됩니다.
- VPC와 Subnet을 선택하고, 미리 생성된 VPC와 Subnet가 없으면 생성 버튼을 클릭합니다.
- DB Server 타입은 위쪽에서 확인했던 서버 사양 중에서 원하는 vCPU와 메모리를 선택하면 됩니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 서버 설정 1&quot; caption=&quot;&quot; %}

- 데이터 스토리지 타입과 암호화 적용 여부를 선택합니다.
- 데이터 스토리지는 기본 10GB로 설정되며 최대 6000GB까지 자동으로 증가합니다.
- DB Server 이름과 DB Service 이름을 입력합니다. DB Service 이름은 DB Server를 역할별로 구분한 그룹의 명칭입니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 서버 설정 2&quot; caption=&quot;&quot; %}

### DB 설정
- USER ID와 암호를 입력합니다. (ID와 암호는 잊어버리지 않도록 잘 보관해야 합니다.)
- 접근제어는 접근을 허용할 IP 대역을 입력합니다.
- DB 접속포트는 기본 포트가 5432 입니다.
- 기본 DB명을 입력하고, Backup 설정을 선택합니다.

{% include warning.html title=&quot;접속포트 설정&quot; content=&quot;DB 접속포트는 한번 설정하면 이후에 변경할 수 없으니 신중하게 설정하셔야 합니다.&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - DB 설정&quot; caption=&quot;&quot; %}

### 최종 확인
지금까지 입력한 값이 이상이 없는지 최종 확인하고, 수정할 부분이 없으면 [생성] 버튼을 클릭합니다.  

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 최종 확인&quot; caption=&quot;&quot; %}

## DB 상세 정보
DB 생성이 완료되면 아래와 같이 DB의 상세 정보를 확인할 수 있습니다.  
이 중에서 Private 도메인과 ACG는 이후 설정에서 사용할 중요한 항목입니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL DB 상세정보&quot; caption=&quot;&quot; %}

## Client Server 생성 | CentOS
처음에 설명했 듯이 `Cloud DB for PostgreSQL DB Server는 Private 환경에서만 접속 가능`하므로 PostgreSQL Client를 설치할 Linux Server를 생성해야 하는데, 
여기서는 **CentOS 7.8**을 설치했습니다.

VPC 환경에서 Linux Server를 생성하는 방법은 다음 문서를 참고하시기 바랍니다. 
- &lt;a href=&quot;/compute/ncloud_compute_server_vpc_create.html&quot; target=&quot;_blank&quot;&gt;VPC 환경에서 서버 생성하기&lt;/a&gt;

{% include callout_v2.html type=&quot;info&quot; level=&quot;1&quot; content=&quot;
생성된 Client Server의 정보 중에서 비공인 IP는 다음 ACG 설정에서 필요하니 기억해 둡니다.&lt;br &gt;
마찬가지로 공인 IP는 로컬 PC에서 PostgreSQL Client에 접속할 때 필요하니 기억해 둡니다.
&quot; %}


{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 접속용 Sever 생성&quot; caption=&quot;&quot; %}

## ACG 설정
[Server] - [ACG]에서 Cloud DB for PostgreSQL 생성 시에 자동으로 생성된 ACG [cloud-postgresql-ooooo]를 선택하고, [ACG 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 리스트&quot; caption=&quot;&quot; %}

### ACG 규칙 설정
ACG 규칙 설정 창에서 [Inbound] 탭을 선택하고 `[접근 소스]는 위에서 생성한 Client Server의 비공인 IP를 입력`하고 허용 포트는 5432를 입력하고 [추가] 버튼을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

## pgAdmin4 설치
Client용 Linux Server에 PostgreSQL DB의 Client 프로그램인 pgAdmin4를 설치합니다.

``` bash
~# yum -y install https://ftp.postgresql.org/pub/pgadmin/pgadmin4/yum/pgadmin4-redhat-repo-2-1.noarch.rpm
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-10.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### pgAdmin4-Web 설치
로컬 PC에서 pgAdmin4에 접속하기 위해 pgAdmin4-Web을 설치합니다.

``` bash
~# yum -y install pgadmin4-web
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-11.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### pgAdmin4-Web 환경 설정
setup-web.sh 스크립트를 실행 후 pgAdmin4-Web 접속을 위한 이메일 계정과 패스워드를 입력합니다. 

``` bash
~# /usr/pgadmin4/bin/setup-web.sh
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-12.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### 오류 상황
간혹 위에서 진행한 pgAdmin4-Web 환경 설정에서 아래와 같은 오류가 발생하는 경우가 있습니다.

{% include warning.html title=&quot;semanage 오류&quot; content=&quot;&lt;br /&gt;
/usr/pgamin4/bin/setup-web.sh: line 87: semanage: command not found&lt;br /&gt;
/usr/pgamin4/bin/setup-web.sh: line 89: semanage: command not found
&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-13.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### 필요한 파일 확인
semanage 실행에 필요한 파일을 확인합니다.  
아래 명령어를 실행하면 나오면 결과에 나오는 파일명을 복사합니다.

``` bash
~# yum provides /usr/sbin/semanage
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-14.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### 추가 파일 설치
위에서 확인한 추가 파일을 설치합니다.

``` bash
~# yum -y install policycoreutils-python-2.5-34.el7.x86_64
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-15.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}


### pgAdmin4-Web 설정 재 확인
필요한 파일 설치를 마쳤으면 pgAdmin4-Web 환경 설정 명령어를 다시 실행합니다. 문제가 해결되었으면 오류 메시지가 나타나지 않습니다.

``` bash
~# /usr/pgadmin4/bin/setup-web.sh
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-16.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

## pgAdmin4 접속
pgAdmin4 접속 주소는 `http://[Client Server 공인IP 주소]/pgadmin4/` 입니다.  
위 주소로 접속하면 아래와 같이 Email Address와 Password 입력 화면이 나오는데 pgAdmin4-Web 환경 설정에서 입력한 이메일과 패스워드를 입력하고 로그인 합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-17.png&quot; width=&quot;835&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### 서버 추가
pgAdmin에서 [Add New Server] 버튼을 클릭해서 위에서 생성했던 DB서버를 연결합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-18.png&quot; width=&quot;837&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

#### Name 입력
등록할 DB의 이름을 편하게 입력합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-19.png&quot; width=&quot;497&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

#### 연결 정보 입력
- Host name/address: Cloud DB for PostgreSQL 생성 후에 확인한 **`Private 도메인 (pg-oooo-vpc-cdb-kr.ntruss.com)`**을 입력합니다.
- Username: Cloud DB for PostgreSQL 생성 시에 입력한 **USER ID**를 입력합니다.
- Password: Cloud DB for PostgreSQL 생성 시에 입력한 **USER 암호**를 입력합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-20.png&quot; width=&quot;497&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

## pgAdmin4 대시보드
연결 정보에 이상이 없고 정상적으로 접속이 되면 아래와 같이 대시보드 화면을 확인할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-21.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

## DB Service 상세 보기
DB Service 상세 보기에서는 Database 추가/삭제, Config 관리, User 추가/삭제, Backup 설정 등을 관리할 수 있습니다.  
Cloud DB for PostgreSQL을 선택하고 [DB 관리] - [DB Service 상세보기] 메뉴를 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-22.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### Database 관리
PostgreSQL DB의 Database를 추가/삭제 할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-23.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### DB User 관리
Cloud DB for PostgreSQL의 DB User를 추가/삭제 할 수 있습니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;
&amp;#8259; PostgreSQL은 `1개의 DB에 1개 계정만 owner`로 지정할 수 있습니다.&lt;br /&gt;
&amp;#8259; 1개의 DB를 여러 계정으로 관리해야 하는 경우는 서브 계정을 만들고 &lt;br /&gt;
&amp;nbsp;&amp;nbsp; owner 계정으로 서브 계정에 별도의 권한을 설정해야 합니다.&lt;br /&gt;&lt;br /&gt;
&amp;#8259; 이때 `계정 생성은 Ncloud 콘솔에서만 가능`합니다. (아래 화면의 DB User 관리 기능)&lt;br /&gt;
&amp;#8259; 그 외의 `권한 설정은 pgAdmin4 웹페이지에서` 설정해야 합니다.
&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-24.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

#### 서브 계정
subid라는 서브 계정을 만들었다고 가정했을 때 아래 화면처럼 Superuser 등의 권한 설정을 할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-25.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### DB 접근 권한 설정
서브 계정의 특정 DB에 대한 접근 권한을 설정하고자 할 경우는 아래와 같이 DB를 선택하고, 마우스 오른쪽 클릭을 한 후 [Properties] 메뉴를 선택합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-26.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

[Properties] 설정 화면에서 [Security] 메뉴를 선택하면 계정별로 권한을 설정할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-27.png&quot; width=&quot;750&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}


## 참고 URL
1. Ncloud Cloud DB for PostgreSQL 기본 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/clouddbforpostgresql-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/clouddbforpostgresql-overview&lt;/a&gt;

2. pgAdmin 홈페이지
	- &lt;a href=&quot;https://www.pgadmin.org/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://www.pgadmin.org/&lt;/a&gt;

3. Cloud DB for PostgreSQL Private 도메인 접속 - Ubuntu
	- &lt;a href=&quot;/database/ncloud-database-cloud-db-for-postgresql-guide-ubuntu.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-guide-ubuntu.html&lt;/a&gt;

4. Cloud DB for PostgreSQL Public 도메인 접속
	- &lt;a href=&quot;/database/ncloud-database-cloud-db-for-postgresql-public-domain-guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-public-domain-guide.html&lt;/a&gt;</description>
            <pubDate>Wed, 27 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-guide-centos.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-guide-centos.html</guid>
            
            <category>database</category>
            
            <category>clouddb</category>
            
            <category>vpc</category>
            
            
        </item>
        
        <item>
            <title>VPC환경에서 Cloud DB for PostgreSQL 생성하기 | Ubuntu</title>
            <description>## 지원 클라우드 환경
Ncloud Cloud DB for PostgreSQL이 지원하는 클라우드 환경은 다음과 같습니다.

- 리전(존): 한국, 싱가포르
- VPC만	지원
- 언어: 한국어, 영어, 일본어, 중국어(간체)
- DB 엔진 버전: PostgreSQL 13.3


## 서버 사양과 요금

*(2022-03-30 기준)*
&lt;table class=&quot;simple_table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;&lt;th rowspan=&quot;2&quot;&gt;타입&lt;/th&gt;&lt;th colspan=&quot;3&quot;&gt;제공사양&lt;/th&gt;&lt;th&gt;이용 요금&lt;/th&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;th&gt;vCPU&lt;/th&gt;&lt;th&gt;메모리&lt;/th&gt;&lt;th&gt;디스크&lt;/th&gt;&lt;th&gt;시간당/대&lt;/th&gt;&lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td rowspan=&quot;5&quot;&gt;High CPU&lt;/td&gt;&lt;td&gt;2개&lt;/td&gt;&lt;td&gt;4GB&lt;/td&gt;&lt;td rowspan=&quot;5&quot;&gt;50GB&lt;/td&gt;&lt;td&gt;158원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;4개&lt;/td&gt;&lt;td&gt;8GB&lt;/td&gt;&lt;td&gt;323원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;8개&lt;/td&gt;&lt;td&gt;16GB&lt;/td&gt;&lt;td&gt;653원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;16개&lt;/td&gt;&lt;td&gt;32GB&lt;/td&gt;&lt;td&gt;1,313원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;32개&lt;/td&gt;&lt;td&gt;64GB&lt;/td&gt;&lt;td&gt;2,633원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td rowspan=&quot;5&quot;&gt;Standard&lt;/td&gt;&lt;td&gt;2개&lt;/td&gt;&lt;td&gt;8GB&lt;/td&gt;&lt;td rowspan=&quot;5&quot;&gt;50GB&lt;/td&gt;&lt;td&gt;250원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;4개&lt;/td&gt;&lt;td&gt;16GB&lt;/td&gt;&lt;td&gt;506원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;8개&lt;/td&gt;&lt;td&gt;32GB&lt;/td&gt;&lt;td&gt;1,019원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;16개&lt;/td&gt;&lt;td&gt;64GB&lt;/td&gt;&lt;td&gt;2,045원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;32개&lt;/td&gt;&lt;td&gt;128GB&lt;/td&gt;&lt;td&gt;4,099원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td rowspan=&quot;5&quot;&gt;High Memory&lt;/td&gt;&lt;td&gt;2개&lt;/td&gt;&lt;td&gt;16GB&lt;/td&gt;&lt;td rowspan=&quot;5&quot;&gt;50GB&lt;/td&gt;&lt;td&gt;302원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;4개&lt;/td&gt;&lt;td&gt;32GB&lt;/td&gt;&lt;td&gt;611원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;8개&lt;/td&gt;&lt;td&gt;64GB&lt;/td&gt;&lt;td&gt;1,227원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;16개&lt;/td&gt;&lt;td&gt;128GB&lt;/td&gt;&lt;td&gt;2,462원&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;32개&lt;/td&gt;&lt;td&gt;256GB&lt;/td&gt;&lt;td&gt;4,927원&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


## 서버 사양 변경 시 제약 사항
 Cloud DB for PostgreSQL 서버는 타입은 변경할 수 없지만 `메모리 크기는 콘솔 PostgreSQL Server 메뉴에서 스펙 변경 기능을 사용하여 언제든지 변경`할 수 있습니다. 그 외 제약 사항은 아래와 같습니다.

- 같은 타입 내에서만 변경 가능
- 2대 이상의 서버로 구성된 경우(고가용성 사용 및 Read Replica 사용) 모두 동일한 사양으로 변경
- 변경 완료 후 서버가 다시 시작되며 이에 따라 서비스 영향 발생 가능성 존재


## 상세 특징
- DB 엔진 버전: **PostgreSQL 13.3**
- 스토리지: 기본 10GB 데이터 스토리지를 제공하며, 10GB 단위로 6000GB까지 자동으로 용량이 증가
- Multi Zone 구성 제공
- 자동 Fail-over 기본 지원
- 최대 5대까지 Read Replica 확장
- 최대 30일까지 자동 백업 및 보관

## 서버 접근 방법
Cloud DB for PostgreSQL은 현재 다음의 3가지 방법으로 접근 가능한데 여기서는 별도의 Linux 서버를 생성해서 PostgreSQL과 Private 통신을 하는 방법으로 진행하겠습니다.

{% include callout_v2.html type=&quot;info&quot; level=&quot;3&quot; content=&quot;
&amp;#8259; Public Domain으로 접근 (*2022-04-21 업데이트*) &lt;br /&gt;
&amp;#8259; PostgreSQL DB와 Private 통신을 위한 별도의 서버를 생성해서 접근 &lt;br /&gt;
&amp;#8259; SSL VPN을 이용해서 접근
&quot; %}

## DB 생성
[Cloud DB for PostgreSQL] - [DB Server]에서 [DB Server 생성] 버튼을 클릭해 DB를 생성을 시작합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하는 방법&quot; caption=&quot;&quot; %}

### 서버 설정
- DB 엔진: 현재 지원되는 `DB 엔진 버전은 PostgreSQL 13.3` 입니다.  
- 고가용성 지원은 기본 선택 사항인데, 필요하지 않을 경우 체크를 해제하면 됩니다.
- VPC와 Subnet을 선택하고, 미리 생성된 VPC와 Subnet가 없으면 생성 버튼을 클릭합니다.
- DB Server 타입은 위쪽에서 확인했던 서버 사양 중에서 원하는 vCPU와 메모리를 선택하면 됩니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 서버 설정 1&quot; caption=&quot;&quot; %}

- 데이터 스토리지 타입과 암호화 적용 여부를 선택합니다.
- 데이터 스토리지는 기본 10GB로 설정되며 최대 6000GB까지 자동으로 증가합니다.
- DB Server 이름과 DB Service 이름을 입력합니다. DB Service 이름은 DB Server를 역할별로 구분한 그룹의 명칭입니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 서버 설정 2&quot; caption=&quot;&quot; %}

### DB 설정
- USER ID와 암호를 입력합니다. (ID와 암호는 잊어버리지 않도록 잘 보관해야 합니다.)
- 접근제어는 접근을 허용할 IP 대역을 입력합니다.
- DB 접속포트는 기본 포트가 5432 입니다.
- 기본 DB명을 입력하고, Backup 설정을 선택합니다.

{% include warning.html title=&quot;접속포트 설정&quot; content=&quot;DB 접속포트는 한번 설정하면 이후에 변경할 수 없으니 신중하게 설정하셔야 합니다.&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - DB 설정&quot; caption=&quot;&quot; %}

### 최종 확인
지금까지 입력한 값이 이상이 없는지 최종 확인하고, 수정할 부분이 없으면 [생성] 버튼을 클릭합니다.  

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 생성하기 - 최종 확인&quot; caption=&quot;&quot; %}

## DB 상세 정보
DB 생성이 완료되면 아래와 같이 DB의 상세 정보를 확인할 수 있습니다.  
이 중에서 Private 도메인과 ACG는 이후 설정에서 사용할 중요한 항목입니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL DB 상세정보&quot; caption=&quot;&quot; %}

## Client Server 생성 | Ubuntu
처음에 설명했 듯이 `Cloud DB for PostgreSQL DB Server는 Private 환경에서만 접속 가능`하므로 PostgreSQL Client를 설치할 Linux Server를 생성해야 하는데, 
여기서는 **Ubuntu 18.04**을 설치했습니다.

VPC 환경에서 Linux Server를 생성하는 방법은 다음 문서를 참고하시기 바랍니다. 
- &lt;a href=&quot;/compute/ncloud_compute_server_vpc_create.html&quot; target=&quot;_blank&quot;&gt;VPC 환경에서 서버 생성하기&lt;/a&gt;

{% include callout_v2.html type=&quot;info&quot; level=&quot;1&quot; content=&quot;
생성된 Client Server의 정보 중에서 비공인 IP는 다음 ACG 설정에서 필요하니 기억해 둡니다.&lt;br &gt;
마찬가지로 공인 IP는 로컬 PC에서 PostgreSQL Client에 접속할 때 필요하니 기억해 둡니다.
&quot; %}


{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-34.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL 접속용 Sever 생성&quot; caption=&quot;&quot; %}

## ACG 설정
[Server] - [ACG]에서 Cloud DB for PostgreSQL 생성 시에 자동으로 생성된 ACG [cloud-postgresql-ooooo]를 선택하고, [ACG 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 리스트&quot; caption=&quot;&quot; %}

### ACG 규칙 설정
ACG 규칙 설정 창에서 [Inbound] 탭을 선택하고 `[접근 소스]는 위에서 생성한 Client Server의 비공인 IP를 입력`하고 허용 포트는 5432를 입력하고 [추가] 버튼을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

## pgAdmin4 설치
Client용 Linux Server에 PostgreSQL DB의 Client 프로그램인 pgAdmin4를 설치합니다.

### Repository 설정
pgAdmin4 설치하기 위해 Repository를 먼저 설정합니다.

``` bash
~# curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-28.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

``` bash
~# sh -c &apos;echo &quot;deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main&quot; &gt; /etc/apt/sources.list.d/pgadmin4.list &amp;&amp; apt update&apos;
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-29.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### 오류 상황
간혹 위에서 진행한 Repository 설정에서 아래와 같은 오류가 발생하는 경우가 있습니다.

{% include warning.html title=&quot;Certificate verification failed&quot; content=&quot;
The certificate is NOT trusted. The certificate chain uses expired certificate. Could not handshake: Error in the certificate verification.
&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-35.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### 추가 기능 설치
위 오류 메시지에 보면 인증서 관련해서 오류가 발생하는 것으로 확인되었기에 인증서 관련 기능을 추가 설치합니다.

``` bash
~# apt install ca-certificates
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-30.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### Repository 다시 설정
Repository 설정에서 오류가 발생했던 부분을 다시 설정합니다. 실행해보면 정상적으로 설정되었다는 메시지를 확인할 수 있습니다.

``` bash
~# sh -c &apos;echo &quot;deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main&quot; &gt; /etc/apt/sources.list.d/pgadmin4.list &amp;&amp; apt update&apos;
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-31.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}


### pgAdmin4 설치
로컬 PC에서 pgAdmin4에 접속하기 위해 pgAdmin4-Web을 설치합니다.

``` bash
~# apt install pgadmin4
```
{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; apt install pgadmin4: desktop, web mode 두가지 모두 설치&lt;br /&gt;
&amp;#8259; apt install pgadmin4-desktop: desktop mode만 설치&lt;br /&gt;
&amp;#8259; apt install pgadmin4-web: web mode만 설치
&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-32.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}


### pgAdmin4-Web 환경 설정
setup-web.sh 스크립트를 실행 후 pgAdmin4-Web 접속을 위한 이메일 계정과 패스워드를 입력합니다. 

``` bash
~# /usr/pgadmin4/bin/setup-web.sh
```
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-33.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

## pgAdmin4 접속
pgAdmin4 접속 주소는 `http://[Client Server 공인IP 주소]/pgadmin4/` 입니다.  
위 주소로 접속하면 아래와 같이 Email Address와 Password 입력 화면이 나오는데 pgAdmin4-Web 환경 설정에서 입력한 이메일과 패스워드를 입력하고 로그인 합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-17.png&quot; width=&quot;835&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### 서버 추가
pgAdmin에서 [Add New Server] 버튼을 클릭해서 위에서 생성했던 DB서버를 연결합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-18.png&quot; width=&quot;837&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

#### Name 입력
등록할 DB의 이름을 편하게 입력합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-19.png&quot; width=&quot;497&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

#### 연결 정보 입력
- Host name/address: Cloud DB for PostgreSQL 생성 후에 확인한 **`Private 도메인 (pg-oooo-vpc-cdb-kr.ntruss.com)`**을 입력합니다.
- Username: Cloud DB for PostgreSQL 생성 시에 입력한 **USER ID**를 입력합니다.
- Password: Cloud DB for PostgreSQL 생성 시에 입력한 **USER 암호**를 입력합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-20.png&quot; width=&quot;497&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

## pgAdmin4 대시보드
연결 정보에 이상이 없고 정상적으로 접속이 되면 아래와 같이 대시보드 화면을 확인할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-21.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

## DB Service 상세 보기
DB Service 상세 보기에서는 Database 추가/삭제, Config 관리, User 추가/삭제, Backup 설정 등을 관리할 수 있습니다.  
Cloud DB for PostgreSQL을 선택하고 [DB 관리] - [DB Service 상세보기] 메뉴를 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-22.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### Database 관리
PostgreSQL DB의 Database를 추가/삭제 할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-23.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### DB User 관리
Cloud DB for PostgreSQL의 DB User를 추가/삭제 할 수 있습니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;
&amp;#8259; PostgreSQL은 `1개의 DB에 1개 계정만 owner`로 지정할 수 있습니다.&lt;br /&gt;
&amp;#8259; 1개의 DB를 여러 계정으로 관리해야 하는 경우는 서브 계정을 만들고 &lt;br /&gt;
&amp;nbsp;&amp;nbsp; owner 계정으로 서브 계정에 별도의 권한을 설정해야 합니다.&lt;br /&gt;&lt;br /&gt;
&amp;#8259; 이때 `계정 생성은 Ncloud 콘솔에서만 가능`합니다. (아래 화면의 DB User 관리 기능)&lt;br /&gt;
&amp;#8259; 그 외의 `권한 설정은 pgAdmin4 웹페이지에서` 설정해야 합니다.
&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-24.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

#### 서브 계정
subid라는 서브 계정을 만들었다고 가정했을 때 아래 화면처럼 Superuser 등의 권한 설정을 할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-25.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

### DB 접근 권한 설정
서브 계정의 특정 DB에 대한 접근 권한을 설정하고자 할 경우는 아래와 같이 DB를 선택하고, 마우스 오른쪽 클릭을 한 후 [Properties] 메뉴를 선택합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-26.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}

[Properties] 설정 화면에서 [Security] 메뉴를 선택하면 계정별로 권한을 설정할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-postgresql-27.png&quot; width=&quot;750&quot; alt=&quot;Ncloud VPC환경에서 Cloud DB for PostgreSQL ACG 설정하기&quot; caption=&quot;&quot; %}


## 참고 URL
1. Ncloud Cloud DB for PostgreSQL 기본 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/clouddbforpostgresql-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/clouddbforpostgresql-overview&lt;/a&gt;

2. pgAdmin 홈페이지
	- &lt;a href=&quot;https://www.pgadmin.org/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://www.pgadmin.org/&lt;/a&gt;
  
3. Cloud DB for PostgreSQL Private 도메인 접속 - CentOS
	- &lt;a href=&quot;/database/ncloud-database-cloud-db-for-postgresql-guide-centos.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-guide-centos.html&lt;/a&gt;

4. Cloud DB for PostgreSQL Public 도메인 접속
	- &lt;a href=&quot;/database/ncloud-database-cloud-db-for-postgresql-public-domain-guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-public-domain-guide.html&lt;/a&gt;</description>
            <pubDate>Wed, 27 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-guide-ubuntu.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-postgresql-guide-ubuntu.html</guid>
            
            <category>database</category>
            
            <category>clouddb</category>
            
            <category>vpc</category>
            
            
        </item>
        
        <item>
            <title>Ubuntu에서 NginX SSL 인증서 설정하는 방법</title>
            <description>## 개요
Ncloud (네이버 클라우드) Ubuntu 서버에서 NginX 최신 버전에 SSL 인증서를 설정하고, http로 접속 시에 https로 리다이렉트하는 방법에 대한 내용을 정리해보겠습니다.  


## 서버 환경

{% include callout_v2.html type=&quot;secondary&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; OS: Ubuntu 20.04 &lt;br /&gt;
&amp;#8259; NginX: NginX 1.21.6 &lt;br /&gt;
&amp;#8259; SSL 인증서: 로컬 테스트용 인증서 
&quot; %}

## NginX 설치
Ubuntu에 Nginx 최신 버전을 설치하는 방법은 아래 문서에서 확인하시면 됩니다.
- &lt;a href=&quot;/compute/ncloud_compute_lemp_nginx_install_setting_ubuntu_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_ubuntu_guide.html&lt;/a&gt;


## 테스트 사이트 접속
설치한 서버에 IP 주소로 접속해 봅니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-01.png&quot; width=&quot;846&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}


## 테스트용 SSL 인증서 생성
SSL 인증서를 저장할 디렉토리를 생성하고 30일 기한의 테스트용 인증서 파일 (nginx-ssl.key, nginx-ssl.crt)을 생성합니다. 
여기서는 nginx-ssl-test.com 이라는 임의의 테스트용 도메인을 사용하겠습니다.

``` bash
~# mkdir /root/ssl/
~# openssl req -x509 -days 30 -nodes -newkey rsa:2048 \
   -keyout /root/ssl/nginx-ssl.key -out /root/ssl/nginx-ssl.crt
```

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

인증서 파일이 제대로 저장되었는지 확인합니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}


## NginX SSL 환경 설정
NginX 환경 설정 파일 (/etc/nginx/conf.d/default.conf) 을 아래와 같이 수정합니다.

``` bash
~# vi /etc/nginx/conf.d/default.conf
```

{% include note.html title=&quot;환경설정 파일 위치&quot; content=&quot;
NginX 버전을 위와 같이 최신 버전을 따로 설치하지 않고 &lt;br /&gt;
Ubuntu에 기본 설정된 리포지토리에 있는 버전(1.18.0)을 apt install nginx로 바로 설치한 경우에는 &lt;br /&gt;
NginX 환경 설정 파일 위치가 **/etc/nginx/sites-available/default**로 설정되어 있습니다.
&quot; %}


``` nginx
server {
    listen       80;
    server_name  nginx-ssl-test.com;
    return 301 https://$host$request_uri;
}

server {
    listen       443 ssl;
    server_name  nginx-ssl-test.com;

    ssl_certificate /root/ssl/nginx-ssl.crt;
    ssl_certificate_key /root/ssl/nginx-ssl.key;

    ### 이하 생략 ###
}
```

``` bash
~# systemctl restart nginx
```

### SSL 인증서 파일 설정
여기서는 테스트용으로 생성한 인증서 파일의 위치를 아래와 같은 양식으로 지정합니다.  
외부 공식 인증서 사이트에서 발급 받은 인증서도 원하는 곳에 저장하고 아래와 같이 위치를 지정해주면 됩니다.

``` nginx
    ssl_certificate /root/ssl/nginx-ssl.crt;
    ssl_certificate_key /root/ssl/nginx-ssl.key;
```

### http 접속 시 https 리다이렉트
NginX 웹서버에 http 접속 시에 https로 강제 리다이렉트를 하려고 할 경우에는 http로 접속하는 포트 (일반적으로 80) 설정에 아래와 같이 지정해주면 리다이렉트 됩니다.

``` nginx
    return 301 https://$host$request_uri;
```

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-10.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}


## hosts 파일 수정
테스트용으로 임의 설정한 도메인으로 접속하게 될 경우에는 hosts 파일을 수정해야 합니다.  
`실제 도메인을 사용할 경우에는 아래 과정이 필요 없기에` [다음 단계로 바로 이동&lt;i class=&quot;fa-solid fa-turn-down&quot;&gt;&lt;/i&gt;](#https-access-test)하시면 됩니다. 

윈도우 10에서 hosts 파일은 C:\Windows\System32\drivers\etc 에 존재하는데 직접 수정할 수가 없으므로 다음과 같은 단계를 거쳐야 합니다.

1. C:\Windows\System32\drivers\etc\hosts 파일을 임의의 작업 폴더 (예: D:\Work)로 복사합니다.
2. 복사한 hosts 파일을 수정해서 123.456.789.123 nginx-ssl-test.com 처럼 접속할 IP 주소와 도메인을 추가합니다.
3. 수정한 파일을 C:\Windows\System32\drivers\etc 위치로 덮어쓰기 합니다.
4. 덮어쓰기 할 때 관리자 권한이 필요하다는 안내 메시지가 나타나면 [계속] 버튼을 클릭합니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-04.png&quot; width=&quot;745&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-05.png&quot; width=&quot;710&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-06.png&quot; width=&quot;710&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

## https 접속 테스트 {#https-access-test}
모든 설정을 마친 후에 테스트로 설정한 nginx-ssl-test.com 으로 접속하면 아래와 같이 https로 접속되는 것을 확인할 수 있습니다.  
다만 로컬 테스트용 인증서이기 때문에 [주의 요함]이라는 메시지가 나타납니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-07.png&quot; width=&quot;846&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

### 테스트 인증서 확인
[주의 요함] 부분을 클릭하면 인증서 부분에 [인증서가 올바르지 않음]이라는 메시지가 보이는데 이곳을 클릭합니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-08.png&quot; width=&quot;846&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

### 테스트 인증서 정보
아래와 같이 처음에 설정한 내용이 인증서 정보에 올바르게 표시되는 것을 확인할 수 있습니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-ubuntu-09.png&quot; width=&quot;470&quot; alt=&quot;Ncloud Ubuntu 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}


## 참고 URL
1.  NginX Linux packages 설치 가이드
	- &lt;a href=&quot;http://nginx.org/en/linux_packages.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;http://nginx.org/en/linux_packages.html&lt;/a&gt;

2.  Ubuntu에서 NginX 설치, 설정하는 방법
	- &lt;a href=&quot;/compute/ncloud_compute_lemp_nginx_install_setting_ubuntu_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_ubuntu_guide.html&lt;/a&gt;

3.  CentOS에서 NginX SSL 인증서 설정하는 방법
	- &lt;a href=&quot;/compute/ncloud_compute_lemp_nginx_ssl_setting_centos_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_ssl_setting_centos_guide.html&lt;/a&gt;</description>
            <pubDate>Tue, 26 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_ssl_setting_ubuntu_guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_ssl_setting_ubuntu_guide.html</guid>
            
            <category>ubuntu</category>
            
            <category>lemp</category>
            
            <category>nginx</category>
            
            <category>ssl</category>
            
            
        </item>
        
        <item>
            <title>CentOS에서 NginX SSL 인증서 설정하는 방법</title>
            <description>## 개요
Ncloud (네이버 클라우드) CentOS 서버에서 NginX 최신 버전에 SSL 인증서를 설정하고, http로 접속 시에 https로 리다이렉트하는 방법에 대한 내용을 정리해보겠습니다.  


## 서버 환경

{% include callout_v2.html type=&quot;secondary&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; OS: CentOS 7.8 &lt;br /&gt;
&amp;#8259; NginX: NginX 1.21.6 &lt;br /&gt;
&amp;#8259; SSL 인증서: 로컬 테스트용 인증서 
&quot; %}

## NginX 설치
CentOS에 Nginx 최신 버전을 설치하는 방법은 아래 문서에서 확인하시면 됩니다.
- &lt;a href=&quot;/compute/ncloud_compute_lemp_nginx_install_setting_centos_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_centos_guide.html&lt;/a&gt;


## 테스트 사이트 접속
설치한 서버에 IP 주소로 접속해 봅니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-01.png&quot; width=&quot;846&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}


## 테스트용 SSL 인증서 생성
SSL 인증서를 저장할 디렉토리를 생성하고 30일 기한의 테스트용 인증서 파일 (nginx-ssl.key, nginx-ssl.crt)을 생성합니다. 
여기서는 nginx-ssl-test.com 이라는 임의의 테스트용 도메인을 사용하겠습니다.

``` bash
~# mkdir /root/ssl/
~# openssl req -x509 -days 30 -nodes -newkey rsa:2048 \
   -keyout /root/ssl/nginx-ssl.key -out /root/ssl/nginx-ssl.crt
```

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

인증서 파일이 제대로 저장되었는지 확인합니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}


## NginX SSL 환경 설정
NginX 환경 설정 파일 (/etc/nginx/conf.d/default.conf) 을 아래와 같이 수정합니다.

``` bash
~# vi /etc/nginx/conf.d/default.conf
```
``` nginx
server {
    listen       80;
    server_name  nginx-ssl-test.com;
    return 301 https://$host$request_uri;
}

server {
    listen       443 ssl;
    server_name  nginx-ssl-test.com;

    ssl_certificate /root/ssl/nginx-ssl.crt;
    ssl_certificate_key /root/ssl/nginx-ssl.key;

    ### 이하 생략 ###
}
```

``` bash
~# systemctl restart nginx
```

### SSL 인증서 파일 설정
여기서는 테스트용으로 생성한 인증서 파일의 위치를 아래와 같은 양식으로 지정합니다.  
외부 공식 인증서 사이트에서 발급 받은 인증서도 원하는 곳에 저장하고 아래와 같이 위치를 지정해주면 됩니다.

``` nginx
    ssl_certificate /root/ssl/nginx-ssl.crt;
    ssl_certificate_key /root/ssl/nginx-ssl.key;
```

### http 접속 시 https 리다이렉트
NginX 웹서버에 http 접속 시에 https로 강제 리다이렉트를 하려고 할 경우에는 http로 접속하는 포트 (일반적으로 80) 설정에 아래와 같이 지정해주면 리다이렉트 됩니다.

``` nginx
    return 301 https://$host$request_uri;
```

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-10.png&quot; width=&quot;840&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}


## hosts 파일 수정
테스트용으로 임의 설정한 도메인으로 접속하게 될 경우에는 hosts 파일을 수정해야 합니다.  
`실제 도메인을 사용할 경우에는 아래 과정이 필요 없기에` [다음 단계로 바로 이동&lt;i class=&quot;fa-solid fa-turn-down&quot;&gt;&lt;/i&gt;](#https-access-test)하시면 됩니다. 

윈도우 10에서 hosts 파일은 C:\Windows\System32\drivers\etc 에 존재하는데 직접 수정할 수가 없으므로 다음과 같은 단계를 거쳐야 합니다.

1. C:\Windows\System32\drivers\etc\hosts 파일을 임의의 작업 폴더 (예: D:\Work)로 복사합니다.
2. 복사한 hosts 파일을 수정해서 123.456.789.123 nginx-ssl-test.com 처럼 접속할 IP 주소와 도메인을 추가합니다.
3. 수정한 파일을 C:\Windows\System32\drivers\etc 위치로 덮어쓰기 합니다.
4. 덮어쓰기 할 때 관리자 권한이 필요하다는 안내 메시지가 나타나면 [계속] 버튼을 클릭합니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-04.png&quot; width=&quot;745&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-05.png&quot; width=&quot;710&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-06.png&quot; width=&quot;710&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

## https 접속 테스트 {#https-access-test}
모든 설정을 마친 후에 테스트로 설정한 nginx-ssl-test.com 으로 접속하면 아래와 같이 https로 접속되는 것을 확인할 수 있습니다.  
다만 로컬 테스트용 인증서이기 때문에 [주의 요함]이라는 메시지가 나타납니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-07.png&quot; width=&quot;846&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

### 테스트 인증서 확인
[주의 요함] 부분을 클릭하면 인증서 부분에 [인증서가 올바르지 않음]이라는 메시지가 보이는데 이곳을 클릭합니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-08.png&quot; width=&quot;846&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}

### 테스트 인증서 정보
아래와 같이 처음에 설정한 내용이 인증서 정보에 올바르게 표시되는 것을 확인할 수 있습니다.

{% include image.html file=&quot;compute/lemp/ncloud-server-nginx-ssl-setting-guide-centos-09.png&quot; width=&quot;470&quot; alt=&quot;Ncloud CentOS 서버에 NginX SSL 인증서를 설정하는 방법&quot; caption=&quot;&quot; %}


## 참고 URL
1.  NginX Linux packages 설치 가이드
	- &lt;a href=&quot;http://nginx.org/en/linux_packages.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;http://nginx.org/en/linux_packages.html&lt;/a&gt;

2.  CentOS에서 NginX 설치, 설정하는 방법
	- &lt;a href=&quot;/compute/ncloud_compute_lemp_nginx_install_setting_centos_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_centos_guide.html&lt;/a&gt;

3.  Ubuntu에서 NginX SSL 인증서 설정하는 방법
	- &lt;a href=&quot;/compute/ncloud_compute_lemp_nginx_ssl_setting_ubuntu_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_ssl_setting_ubuntu_guide.html&lt;/a&gt;</description>
            <pubDate>Tue, 26 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_ssl_setting_centos_guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_ssl_setting_centos_guide.html</guid>
            
            <category>centos</category>
            
            <category>lemp</category>
            
            <category>nginx</category>
            
            <category>ssl</category>
            
            
        </item>
        
        <item>
            <title>CentOS에서 NginX 설치, 설정하는 방법</title>
            <description>## 개요
Ncloud (네이버 클라우드) CentOS 서버에 NginX 최신 버전을 Package로 설치하고 기본 설정을 하는 방법에 대한 내용을 정리해보겠습니다.  


## 서버 환경

{% include callout_v2.html type=&quot;secondary&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; OS: CentOS 7.8 &lt;br /&gt;
&amp;#8259; NginX: NginX 1.21.5 
&quot; %}

## yum 유틸리티 설치
yum으로 NginX를 설치하기 전에 yum-utils를 먼저 설치합니다. 이미 설치 되어 있을 경우에는 아래와 같이 설치되어 있다는 메시지가 출력됩니다.

``` bash
~# yum install yum-utils
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_01.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## Repository 설정
NginX package를 다운 받아 설치하기 위해서는 Repository를 설정해야 합니다. 
Repository 디렉토리에 nginx.repo 파일을 만들고 아래와 같은 내용을 입력합니다.

``` bash
~# vi /etc/yum.repos.d/nginx.repo
```

``` nginx
[nginx-stable]
name=nginx stable repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=1
enabled=1
gpgkey=https://nginx.org/keys/nginx_signing.key
module_hotfixes=true

[nginx-mainline]
name=nginx mainline repo
baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/
gpgcheck=1
enabled=0
gpgkey=https://nginx.org/keys/nginx_signing.key
module_hotfixes=true
```


{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;NginX는 stable, mainline 두가지 버전이 있습니다. 
NginX의 공식 설명에 따르면 버그 수정이나 보안 패치 등은 항상 mainline 버전에 먼저 적용되기 때문에 mainline을 사용하는 것을 추천한다고 합니다. &lt;br /&gt;
stable 버전을 사용하는 주된 경우는 **third-party 모듈**을 사용하고 있어서 신규 버전에서 **호환성 문제**가 발생할 가능성이 걱정될 때라고 합니다.&quot; %}

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_02.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## 버전 선택
stable, mainline 두가지 버전 중에서 기본은 stable 버전입니다.  
stable 버전을 설치할 경우에는 다음 명령어는 건너띄어도 되고, mainline 버전을 설치하기 위해서는 아래 명령어로 설정을 변경해주어야 합니다.

``` bash
~# yum-config-manager --enable nginx-mainline
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_03.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## NginX 설치
설정을 마쳤으면 yum으로 NginX를 설치합니다.
``` bash
~# yum -y install nginx
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_04.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}



## 디렉토리 설정
다음으로 홈으로 사용할 디렉토리를 생성하고, 해당 디렉토리의 소유권을 설정하겠습니다.  
그리고, NginX가 정상 작동하는지 확인해보기 위해 설치시에 포함된 index.html을 홈 디렉토리로 복사합니다.

``` bash
~# mkdir -p /ncp/data/www
~# chown -R nginx:nginx /ncp/data/www
~# cp /usr/share/nginx/html/index.html /ncp/data/www/index.html
~# ls -al /ncp/data/www
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_05.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}



## 환경 설정
주로 변경할 환경 설정 파일은 /etc/nginx/conf.d/default.conf 입니다.

``` bash
~# vi /etc/nginx/conf.d/default.conf
```
&lt;br /&gt;
### Port와 Server Name 설정
80이 아닌 다른 Port를 사용할 경우나 도메인을 설정하게 될 경우 2, 3 라인에 있는 아래 항목들을 수정하면 됩니다.

``` nginx
server_name  localhost;
server_name  nginx-test.com;
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_06.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


### 홈 디렉토리, 기본 문서 설정
앞에서 만들었던 홈 디렉토리 경로를 설정하고 기본 문서를 지정하는 곳입니다. 

``` nginx
# 변경 전
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

# 변경 후
    root   /ncp/data/www;
    index  index.html index.htm;

    location / {
        try_files $uri $uri/ = 404;
    }
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_07.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_08.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


### error 페이지 설정
404, 500 등의 error 페이지를 설정할 경우 아래 내용들을 수정하면 됩니다.

``` nginx
# 변경 전
    #error_page  404              /404.html;

    location = /50x.html {
        root   /usr/share/nginx/html;
    }

# 변경 후
    error_page  404              /404.html;

    location = /50x.html {
        root   /ncp/data/www;
    }
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_09.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_10.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


### .htaccess 파일 접근 금지 설정
.htaccess 파일에 대한 접근 금지를 설정할 경우 아래 내용을 주석 해제하면 됩니다.

``` nginx
# 변경 전
    #location ~ /\.ht {
    #    deny  all;
    #}

# 변경 후
    location ~ /\.ht {
        deny  all;
    }
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_11.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_12.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## NginX 실행
설정을 모두 마쳤으면 NginX를 시작하고 상태를 확인합니다.

``` bash
~# systemctl start nginx
~# systemctl status nginx
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_13.png&quot; width=&quot;770&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


### 사이트 접속
NginX가 정상 작동하면 아래와 같이 서버 접속 화면을 확인할 수 있습니다.

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_centos_14.png&quot; width=&quot;600&quot; alt=&quot;Ncloud CentOS에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## 참고 URL
1.  NginX Linux packages 설치 가이드
	- &lt;a href=&quot;http://nginx.org/en/linux_packages.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;http://nginx.org/en/linux_packages.html&lt;/a&gt;

2.  Ubuntu에서 NginX 설치, 설정하는 방법
	- &lt;a href=&quot;/compute/ncloud_compute_lemp_nginx_install_setting_ubuntu_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_ubuntu_guide.html&lt;/a&gt;</description>
            <pubDate>Mon, 25 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_centos_guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_centos_guide.html</guid>
            
            <category>centos</category>
            
            <category>lemp</category>
            
            <category>nginx</category>
            
            <category>install</category>
            
            
        </item>
        
        <item>
            <title>Ubuntu에서 NginX 설치, 설정하는 방법</title>
            <description>## 개요
Ncloud (네이버 클라우드) Ubuntu 서버에 NginX 최신 버전을 Package로 설치하고 기본 설정을 하는 방법에 대한 내용을 정리해보겠습니다.  

## 서버 환경

{% include callout_v2.html type=&quot;secondary&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; OS: Ubuntu 20.04 &lt;br /&gt;
&amp;#8259; NginX: NginX 1.21.6 
&quot; %}

## NginX Signing Key 설정
NginX Package 설치에 필요한 Signing Key를 설정합니다.

### gnupg2 등 설치

``` bash
~# sudo apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyring
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_01.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}

### NginX Signing Key 가져오기

``` bash
~# curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \
    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}

### NginX Signing Key 검증
위에서 가져온 Signing Key를 아래 명령어로 검증합니다.  
검증한 FingerPring 값이 `573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62` 와 일치하는지 확인합니다.
``` bash
~# gpg --dry-run --quiet --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## Repository 설정
NginX package를 다운 받아 설치하기 위해서는 Repository를 설정해야 합니다.  
아래 명령어로 리포지토리를 설정합니다. NginX의 **stable, mainline** 두가지 버전 중에서 여기서는 `mainline 버전을 설치`합니다.

### nginx-mainline
``` bash
~# echo &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
    http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx&quot; \
    | sudo tee /etc/apt/sources.list.d/nginx.list
```

### nginx-stable
``` bash
~# echo &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \
    http://nginx.org/packages/ubuntu `lsb_release -cs` nginx&quot; \
    | sudo tee /etc/apt/sources.list.d/nginx.list
```

{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;NginX는 stable, mainline 두가지 버전이 있습니다. 
NginX의 공식 설명에 따르면 버그 수정이나 보안 패치 등은 항상 mainline 버전에 먼저 적용되기 때문에 mainline을 사용하는 것을 추천한다고 합니다. &lt;br /&gt;
stable 버전을 사용하는 주된 경우는 **third-party 모듈**을 사용하고 있어서 신규 버전에서 **호환성 문제**가 발생할 가능성이 걱정될 때라고 합니다.&quot; %}

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_04.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## Repository 우선 순위 설정
배포판에 기본 설정된 리포지토리 보다 위에서 설정한 리포지토리를 우선하도록 설정합니다.

``` bash
~# echo -e &quot;Package: *\nPin: origin nginx.org\nPin: \
    release o=nginx\nPin-Priority: 900\n&quot; | sudo tee /etc/apt/preferences.d/99nginx
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_05.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}

## NginX 설치
설정을 마쳤으면 apt로 NginX를 설치합니다.

``` bash
~# sudo apt update
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_06.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}

``` bash
~# sudo apt install nginx
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_07.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}



## 디렉토리 설정
다음으로 홈으로 사용할 디렉토리를 생성하고, 해당 디렉토리의 소유권을 설정하겠습니다.  
그리고, NginX가 정상 작동하는지 확인해보기 위해 설치시에 포함된 index.html을 홈 디렉토리로 복사합니다.

``` bash
~# mkdir -p /ncp/data/www
~# chown -R nginx:nginx /ncp/data/www
~# cp /usr/share/nginx/html/index.html /ncp/data/www/index.html
~# ls -al /ncp/data/www
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_08.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}



## 환경 설정
주로 변경할 환경 설정 파일은 /etc/nginx/conf.d/default.conf 입니다.

``` bash
~# vi /etc/nginx/conf.d/default.conf
```
&lt;br /&gt;
### Port와 Server Name 설정
80이 아닌 다른 Port를 사용할 경우나 도메인을 설정하게 될 경우 2, 3 라인에 있는 아래 항목들을 수정하면 됩니다.

``` nginx
server_name  localhost;
server_name  nginx-test.com;
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_09.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


### 홈 디렉토리, 기본 문서 설정
앞에서 만들었던 홈 디렉토리 경로를 설정하고 기본 문서를 지정하는 곳입니다. 

``` nginx
# 변경 전
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

# 변경 후
    root   /ncp/data/www;
    index  index.html index.htm;

    location / {
        try_files $uri $uri/ = 404;
    }
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_10.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_11.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


### error 페이지 설정
404, 500 등의 error 페이지를 설정할 경우 아래 내용들을 수정하면 됩니다.

``` nginx
# 변경 전
    #error_page  404              /404.html;

    location = /50x.html {
        root   /usr/share/nginx/html;
    }

# 변경 후
    error_page  404              /404.html;

    location = /50x.html {
        root   /ncp/data/www;
    }
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_12.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_13.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


### .htaccess 파일 접근 금지 설정
.htaccess 파일에 대한 접근 금지를 설정할 경우 아래 내용을 주석 해제하면 됩니다.

``` nginx
# 변경 전
    #location ~ /\.ht {
    #    deny  all;
    #}

# 변경 후
    location ~ /\.ht {
        deny  all;
    }
```

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_14.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_15.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## NginX 실행
설정을 모두 마쳤으면 NginX를 시작하고 상태를 확인합니다.

``` bash
~# systemctl start nginx
~# systemctl status nginx
```
{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_16.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


### 사이트 접속
NginX가 정상 작동하면 아래와 같이 서버 접속 화면을 확인할 수 있습니다.

{% include image.html file=&quot;compute/lemp/ncloud_server_nginx_install_setting_guide_ubuntu_17.png&quot; width=&quot;600&quot; alt=&quot;Ncloud Ubuntu에서 NginX 설치, 설정하는 방법&quot; caption=&quot;&quot; %}


## 참고 URL
1.  NginX Linux packages 설치 가이드
	- &lt;a href=&quot;http://nginx.org/en/linux_packages.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;http://nginx.org/en/linux_packages.html&lt;/a&gt;

2.  CentOS에서 NginX 설치, 설정하는 방법
	- &lt;a href=&quot;/compute/ncloud_compute_lemp_nginx_install_setting_centos_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_centos_guide.html&lt;/a&gt;
</description>
            <pubDate>Mon, 25 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_ubuntu_guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/compute/ncloud_compute_lemp_nginx_install_setting_ubuntu_guide.html</guid>
            
            <category>centos</category>
            
            <category>lemp</category>
            
            <category>nginx</category>
            
            <category>install</category>
            
            
        </item>
        
        <item>
            <title>SourceCommit에서 GitHub Repository 복사해오기 | Ncloud</title>
            <description>## 개요
Ncloud SourceCommit에서 GitHub Repository를 복사해서 가져오기 위해서는 [외부 리포지토리 복사] 기능을 이용해야 하는데, Public Repository는 간단하게 가져올 수 있지만, Private Repository는 GitHub에서 생성한 별도의 Personal access token을 사용해야 가져올 수 있어서 그 내용을 정리해보겠습니다.

## 외부 리포지토리 복사
SourceCommit에서 [외부 리포지토리 복사] 버튼을 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## Public Repository
퍼블릭 리포지토리는 아래와 같이 [복사할 Git URL] 정보를 입력한 후에 [Git 연결 확인] 버튼을 클릭해서 올바른 리포지토리인지 확인 후 [다음] 버튼을 클릭해 이후 과정을 진행하면 완료됩니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## Private Repository
프라이빗 리포지토리는 [프라이빗 리포지토리 여부] 옵션을 켜고 [ID]와 [Password]를 입력해야 복사해 올 수 있습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

### Password 오류
깃허브 계정과 패스워드를 입력하고 [Git 연결 확인] 버튼을 클릭해 보면 ID 또는 Password가 올바르지 않다는 메시지가 나타납니다.  
올바르게 입력했음에도 이런 오류가 발생하는 것은 `2021년 8월부터 외부에서 깃허브에 연결하려고 할 때 계정 패스워드를 사용하지 않고 토큰을 사용하는 방식으로 바뀌었기 때문`입니다.

깃허브 공지 내용을 보면 다음과 같습니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&apos;From GitHub Blog &quot;In July 2020, we announced our intent to require the use of token-based authentication (for example, a personal access, OAuth, or GitHub App installation token) for all authenticated Git operations. Beginning August 13, 2021, we will no longer accept account passwords when authenticating Git operations on GitHub.com.&quot;&apos; %}

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## Personal Access Token 생성
그러면 이제 Personal access token을 생성해보겠습니다.  
깃허브 사이트에 접속해서 [계정] - [Settings]를 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

[Settings] 화면 아래쪽에 [Developer settings] 메뉴를 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

[Developer settings] 화면에서 [Personal access tokens] 메뉴를 클릭하고, [Generate new token] 버튼을 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

### Token 생성
우선 Personal access token 생성 화면에서 토큰 이름을 입력하고, 만료기간을 설정합니다.  
그리고, 토큰으로 이용 가능한 기능의 범위 즉, 권한 설정을 해야 하는데 단순히 리포지토리를 복사하는 용도라면 [repo] 그룹 항목만 체크하셔도 됩니다.  
설정을 마친 후에 아래쪽에 있는 [Generate token] 버튼을 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

### Token 복사
생성된 Personal access toke을 복사합니다.

{% include warning.html title=&quot;주의&quot; content=&quot;생성된 Token은 바로 복사해 두셔야 합니다. 이 화면을 벗어나면 **두번 다시 토큰 문자열을 확인할 수 없습니다**.&lt;br /&gt;Make sure to copy your personal access token now. You won&apos;t be able to see it again!&quot; %}

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## Personal Access Token 입력
[Password] 항목에 Personal Access Token을 입력하고, [Git 연결 확인] 버튼을 클릭하면 문제없이 연결되는 것을 확인할 수 있습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## 보안상품 연동
리포지토리에 악성코드 필터링 보안 시스템인 [File Safer]를 연동하고 싶은 경우 [File Safer 이용 신청] 링크를 클릭해 먼저 이용신청을 하시면 됩니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## 최종 확인
입력한 정보들이 이상이 없는지 최종 확인을 하고 [생성] 버튼을 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## Repository 확인
생성된 리포지토리를 이렇게 확인할 수 있고, 리포지토리 이름을 클릭하면 리포지토리 내용을 확인할 수 있습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

아래와 같이 깃허브에서 복사된 내용을 확인할 수 있습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## Personal Access Token 분실
Personal Access Token이 기억나지 않거나 분실했을 경우에는 다음과 같은 방법으로 재생성 하시면 됩니다.  
[Settings] - [Developer settings] - [Personal access token] 메뉴에서 토큰 이름을 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-15.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

토큰 수정 메뉴에서 [Regenerate token] 버튼을 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-16.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

혹시 만료 기간을 수정려면 수정한 후에 [Regenerate token] 버튼을 클릭합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-17.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

재 생성된 [Personal access token]을 복사합니다. 마찬가지로 이 화면을 벗어나면 두번 다시 확인할 수 없으니 꼭 복사해서 별도로 저장합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-source-commit-external-repository-copy-18.png&quot; width=&quot;845&quot; alt=&quot;Ncloud SourceCommit에서 외부 리포지토리 복사하기 기능으로 GitHub Repository 복사해오는 방법&quot; caption=&quot;&quot; %}

## 참고 URL
1. Ncloud SourceCommit 사용 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/devtools-devtools-2-1&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/devtools-devtools-2-1&lt;/a&gt;

</description>
            <pubDate>Wed, 20 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/dev-tools/ncloud-dev-tools-source-commit-external-repository-copy.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/dev-tools/ncloud-dev-tools-source-commit-external-repository-copy.html</guid>
            
            <category>github</category>
            
            
        </item>
        
        <item>
            <title>Proxy Protocol을 이용해 Client IP 확인하기 | Ubuntu</title>
            <description>## 개요
Ncloud Load Balancer는 HTTP, HTTPS, TCP, SSL 이렇게 4가지의 프로토콜을 지원합니다.  
그런데, Load Balancer를 사용하면서 Client IP를 확인하려고 할 때 http, https 통신의 경우 X-Forwarded-For 헤더값이 지원되기에 Client IP를 확인할 수 있지만, 
TCP 통신의 경우 X-Forwarded-For 헤더를 사용할 수 없기에 Client IP를 확인하기 위해서는 Proxy Protocol 옵션을 활성화 시켜야 합니다.

여기서는 **Ncloud Network Proxy Load Balancer**의 TCP 프로토콜을 사용하면서 `Proxy Protocol 옵션을 활성화`시켜 **Ubuntu 서버에서 Client IP를 기록**하는 방법을 소개하겠습니다.

## 테스트 환경
- VPC 환경
- Ubuntu 18.04
- Apache 2.4.6
- Network Proxy Load Balancer
- Protocol/Port: TCP/80


## Ubuntu 서버 설치
서버를 생성하고 Apache 웹서버와 개발용 추가 모듈이 포함된 **apache2-dev 패키지**를 설치하고 간단한 웹페이지를 만들어 접속해 보았습니다.  

- VPC 환경에서 서버 생성하는 방법 : &lt;a href=&quot;/compute/ncloud_compute_server_vpc_create.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_server_vpc_create.html&lt;/a&gt;

``` bash
~# apt update
~# apt -y install apache2 apache2-dev
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## Target Group 설정 
우선 Load Balancer를 생성하기 전에 Load Balancer에서 사용할 Target Group을 [Load Balancer] - [Target Group]에서 생성합니다.

### Target Group 생성
Target Group의 이름를 입력하고 Target 유형은 [VPC Server]를 선택, 다음으로 VPC 대역을 선택합니다.  
그리고, `프로토콜은 PROXY_TCP를 선택`하고, 포트는 80포트를 사용하겠습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Health Check 설정
Health Check 할 프로토콜은 TCP를 선택합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Target 추가
앞에서 생성했던 서버 2대를 선택하고 [적용 Target]쪽으로 이동시킵니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 설정 확인
설정 정보를 최종 확인하고 이상이 없으면 Target Group을 생성합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

생성된 Target Group를 확인할 수 있습니다.
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Network Proxy Load Balancer 생성
[Load Balancer]에서 [로드밸런서 생성] 버튼을 클릭하고  [네트워크 프록시 로드밸런서]를 선택합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 로드밸런서 설정
필요한 로드밸런서 설정을 선택하는데, 그 중에서 서브넷은 혹시 생성되어 있지 않으면 [서브넷 생성] 버튼을 클릭해 로드밸런서 전용 서브넷을 생성한 후에 다시 돌아옵니다. 여기서는 [10.0.4.0/24] 대역으로 설정했습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 리스너 설정
리스너는 TCP 프로토콜에 80 포트를 선택하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Target Group 선택
Target Group는 위쪽에서 생성한 [Proxy-Protocol-TG] 을 선택합니다. 선택하면 해당 Target Group 설정 내용을 바로 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 설정 확인
선택한 설정을 최종 확인하고 이상이 없으면 [로드밸런서 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 생성 확인
생성된 로드밸런서의 정보를 확인합니다. 특히 접속 정보와 서브넷은 이후 테스트에 사용되므로 꼭 기억하거나 메모해 두는 것이 좋습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Network ACL 설정
로드밸런서 → 서버 접속이 가능하도록 Network ACL에 규칙을 추가합니다.  
[VPC] - [Network ACL] - [ACL Rule]에서 서버와 로드밸런서가 속한 VPC의 ACL을 선택하고 [Rule 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-30.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

Network ACL 규칙 설정 화면에서 프로토콜은 TCP,  접근소스는 로드밸런서 IP 대역인 10.0.4.0/24, 포트는 80을 입력하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-31.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## ACG 설정
로드밸런서 → 서버 접속이 가능하도록 서버 ACG에 규칙을 추가합니다.  
서버에 적용된 ACG의 규칙 설정 화면에서 프로토콜은 TCP,  접근소스는 로드밸런서 IP 대역인 10.0.4.0/24, 포트는 80을 입력하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-32.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 로드밸런서 접속 테스트
위에서 생성된 로드밸런서 접속 주소로 접속을 해보면 아래와 같은 화면을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-15.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Apache 접속 로그 확인
Apache 접속 로그 파일은 아래의 위치에 존재하지만, 저희는 네이버 클라우드 (Ncloud)의 상품 중 하나인 **Cloud Log Analytics**에서 로그를 수집해서 확인해보겠습니다. 
- Ubuntu Apache 로그파일 위치 : /var/log/apache2/access.log

- Cloud Log Analytics 설정 가이드 : &lt;a href=&quot;/analytics/ncloud_analytics_cloud_log_analytics_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/analytics/ncloud_analytics_cloud_log_analytics_guide.html&lt;/a&gt;

Cloud Log Analytics에서 수집한 로그를 확인해보면 위에서 설정했던 **Load Balancer의 IP 대역 (10.0.4.xx)**이 기록된 것을 확인할 수 있습니다.  

다음으로는 로드밸런서 IP가 아닌 실제 Client IP가 기록되도록 설정을 변경해 보겠습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-16-2.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## Proxy Protocol 설정
이제 실제 Client IP가 기록되도록 Proxy Protocol을 설정해보겠습니다.  
[Load Balancer] - [Target Group]에서 위에서 생성했던 Target Group를 선택하고 [TargetGroup 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-17.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

Target Group 설정 화면에서 [ProxyProtocol] 옵션을 체크하고 확인 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-18.png&quot; width=&quot;680&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

위에서 정상적으로 접속이 되었던 로드밸런서 주소로 접속하면 [Bad Request] 메시지가 뜨는 것을 확인할 수 있습니다.  
다음으로는 서버 설정을 변경해야 합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-19.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Apache 모듈 설치
Proxy Protocol을 사용할 때 필요한 Apache 모듈을 Ubuntu 서버에 설치하겠습니다.

### mod_myfixip 모듈 다운로드
아래 명령어로 mod_myfixip.c 파일을 다운로드 받습니다. 정상적으로 다운로드가 완료되면 **&apos;mod_myfixip.c&apos; saved** 라는 메시지를 확인할 수 있습니다.

```bash
~# wget --no-check-certificate https://raw.githubusercontent.com/ggrandes/apache24-modules/master/mod_myfixip.c
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-24.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 모듈 설치
이어서 apxs2 -c -i mod_myfixip.c 명령어로 모듈을 설치합니다.

```bash
~# apxs2 -c -i mod_myfixip.c
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-25.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### myfixip.load 파일 생성
mod_myfixip 모듈을 로드하기 위한 파일을 생성하고, LoadModule 관련 코드를 추가합니다.

``` bash
~# vi /etc/apache2/mods-available/myfixip.load
```
``` apache
LoadModule myfixip_module /usr/lib/apache2/modules/mod_myfixip.so
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-26.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### myfixip.conf 파일 생성
mod_myfixip 모듈 환경 설정 파일을 생성하고 모듈 관련 코드를 추가합니다.  
RewriteIPAllow 항목에는 로드밸런서 IP 대역 (ex: 192.168.0.0/16, 10.31.0.0/16 등)을 입력합니다.  
여기서는 위에서 설정했던 로드밸런서 IP 대역인 `10.0.4.0/24`를 입력했습니다. 

``` bash
~# vi /etc/apache2/mods-available/myfixip.conf
```
``` apache
&lt;IfModule mod_myfixip.c&gt;
  RewriteIPResetHeader off
  RewriteIPAllow 10.0.4.0/24
&lt;/IfModule&gt;
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-27.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 모듈 설치, Apache 재시작
다음 명령으로 myfixip 모듈을 설치하고 Apache를 재시작합니다.

``` bash
~# a2enmod myfixip
~# systemctl restart apache2
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-28.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## 최종 접속 테스트
모든 설정을 모두 마친 후에 서버에 접속해봅니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-15.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 최종 접속 로그 확인
접속 로그를 다시 확인해보면 이번에는 로드밸런서 IP가 아닌 Client IP가 기록된 것을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-29-2.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 참고URL

1. Proxy Protocol 설정하기
  - &lt;a href=&quot;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole#proxy-protocol-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole#proxy-protocol&lt;/a&gt;

2. CentOS 서버에서 Proxy Protocol을 이용해 Client IP 확인하기
  - &lt;a href=&quot;/networking/ncloud-networking-proxy-protocol-client-ip-logging-centos.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-centos.html&lt;/a&gt;


</description>
            <pubDate>Tue, 19 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-ubuntu.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-ubuntu.html</guid>
            
            <category>vpc</category>
            
            <category>load_balancer</category>
            
            <category>proxy</category>
            
            
        </item>
        
        <item>
            <title>Proxy Protocol을 이용해 Client IP 확인하기 | CentOS</title>
            <description>## 개요
Ncloud Load Balancer는 HTTP, HTTPS, TCP, SSL 이렇게 4가지의 프로토콜을 지원합니다.  
그런데, Load Balancer를 사용하면서 Client IP를 확인하려고 할 때 http, https 통신의 경우 X-Forwarded-For 헤더값이 지원되기에 Client IP를 확인할 수 있지만, 
TCP 통신의 경우 X-Forwarded-For 헤더를 사용할 수 없기에 Client IP를 확인하기 위해서는 Proxy Protocol 옵션을 활성화 시켜야 합니다.

여기서는 **Ncloud Network Proxy Load Balancer**의 TCP 프로토콜을 사용하면서 `Proxy Protocol 옵션을 활성화`시켜 **CentOS 서버에서 Client IP를 기록**하는 방법을 소개하겠습니다.

## 테스트 환경
- VPC 환경
- CentOS 7.8
- Apache 2.4.6
- Network Proxy Load Balancer
- Protocol/Port: TCP/80


## CentOS 서버 설치
서버를 생성하고 Apache 웹서버와 개발용 추가 모듈이 포함된 **httpd-devel 패키지**를 설치하고 간단한 웹페이지를 만들어 접속해 보았습니다.  

- VPC 환경에서 서버 생성하는 방법 : &lt;a href=&quot;/compute/ncloud_compute_server_vpc_create.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_server_vpc_create.html&lt;/a&gt;

```bash
~# yum -y install httpd httpd-devel
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Target Group 설정 
우선 Load Balancer를 생성하기 전에 Load Balancer에서 사용할 Target Group을 [Load Balancer] - [Target Group]에서 생성합니다.

### Target Group 생성
Target Group의 이름를 입력하고 Target 유형은 [VPC Server]를 선택, 다음으로 VPC 대역을 선택합니다.  
그리고, `프로토콜은 PROXY_TCP를 선택`하고, 포트는 80포트를 사용하겠습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Health Check 설정
Health Check 할 프로토콜은 TCP를 선택합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Target 추가
앞에서 생성했던 서버 2대를 선택하고 [적용 Target]쪽으로 이동시킵니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 설정 확인
설정 정보를 최종 확인하고 이상이 없으면 Target Group을 생성합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

생성된 Target Group를 확인할 수 있습니다.
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Network Proxy Load Balancer 생성
[Load Balancer]에서 [로드밸런서 생성] 버튼을 클릭하고  [네트워크 프록시 로드밸런서]를 선택합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 로드밸런서 설정
필요한 로드밸런서 설정을 선택하는데, 그 중에서 서브넷은 혹시 생성되어 있지 않으면 [서브넷 생성] 버튼을 클릭해 로드밸런서 전용 서브넷을 생성한 후에 다시 돌아옵니다. 여기서는 [10.0.4.0/24] 대역으로 설정했습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 리스너 설정
리스너는 TCP 프로토콜에 80 포트를 선택하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Target Group 선택
Target Group는 위쪽에서 생성한 [Proxy-Protocol-TG] 을 선택합니다. 선택하면 해당 Target Group 설정 내용을 바로 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 설정 확인
선택한 설정을 최종 확인하고 이상이 없으면 [로드밸런서 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 생성 확인
생성된 로드밸런서의 정보를 확인합니다. 특히 접속 정보와 서브넷은 이후 테스트에 사용되므로 꼭 기억하거나 메모해 두는 것이 좋습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Network ACL 설정
로드밸런서 → 서버 접속이 가능하도록 Network ACL에 규칙을 추가합니다.  
[VPC] - [Network ACL] - [ACL Rule]에서 서버와 로드밸런서가 속한 VPC의 ACL을 선택하고 [Rule 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-30.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

Network ACL 규칙 설정 화면에서 프로토콜은 TCP,  접근소스는 로드밸런서 IP 대역인 10.0.4.0/24, 포트는 80을 입력하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-31.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## ACG 설정
로드밸런서 → 서버 접속이 가능하도록 서버 ACG에 규칙을 추가합니다.  
서버에 적용된 ACG의 규칙 설정 화면에서 프로토콜은 TCP,  접근소스는 로드밸런서 IP 대역인 10.0.4.0/24, 포트는 80을 입력하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-32.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 로드밸런서 접속 테스트
위에서 생성된 로드밸런서 접속 주소로 접속을 해보면 아래와 같은 화면을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Apache 접속 로그 확인
Apache 접속 로그 파일은 아래의 위치에 존재하지만, 저희는 네이버 클라우드 (Ncloud)의 상품 중 하나인 **Cloud Log Analytics**에서 로그를 수집해서 확인해보겠습니다. 
- CentOS Apache 로그파일 위치 : /var/log/httpd/access_log

- Cloud Log Analytics 설정 가이드 : &lt;a href=&quot;/analytics/ncloud_analytics_cloud_log_analytics_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/analytics/ncloud_analytics_cloud_log_analytics_guide.html&lt;/a&gt;

Cloud Log Analytics에서 수집한 로그를 확인해보면 위에서 설정했던 **Load Balancer의 IP 대역 (10.0.4.xx)**이 기록된 것을 확인할 수 있습니다.  

다음에는 로드밸런서 IP가 아닌 실제 Client IP가 기록되도록 설정을 변경해 보겠습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-16-1.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## Proxy Protocol 설정
이제 실제 Client IP가 기록되도록 Proxy Protocol을 설정해보겠습니다.  
[Load Balancer] - [Target Group]에서 위에서 생성했던 Target Group를 선택하고 [TargetGroup 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-17.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

Target Group 설정 화면에서 [ProxyProtocol] 옵션을 체크하고 확인 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-18.png&quot; width=&quot;680&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

위에서 정상적으로 접속이 되었던 로드밸런서 주소로 접속하면 [Bad Request] 메시지가 뜨는 것을 확인할 수 있습니다.  
다음으로는 서버 설정을 변경해야 합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-19.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Apache 모듈 설치
Proxy Protocol을 사용할 때 필요한 Apache 모듈을 CentOS 서버에 설치하겠습니다.

### mod_myfixip 모듈 다운로드
아래 명령어로 mod_myfixip.c 파일을 다운로드 받습니다. 정상적으로 다운로드가 완료되면 **&apos;mod_myfixip.c&apos; saved** 라는 메시지를 확인할 수 있습니다.

```bash
~# wget --no-check-certificate https://raw.githubusercontent.com/ggrandes/apache24-modules/master/mod_myfixip.c
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-20.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 모듈 설치
이어서 /{아파치가 설치된 경로}/bin/apxs -c -i mod_myfixip.c 명령어로 모듈을 설치합니다.

```bash
~# /usr/bin/apxs -c -i mod_myfixip.c
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-21.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### httpd.conf 설정 변경
모듈 설치가 완료된 후에 httpd.conf 파일을 열어서 제일 아래쪽에 아래 코드를 추가합니다.  
RewriteIPAllow 항목에는 로드밸런서 IP 대역 (ex: 192.168.0.0/16, 10.31.0.0/16 등)을 입력합니다.  
여기서는 위에서 설정했던 로드밸런서 IP 대역인 `10.0.4.0/24`를 입력했습니다. 

``` bash
~# vi /etc/httpd/conf/httpd.conf
```
``` apache
LoadModule myfixip_module modules/mod_myfixip.so

&lt;IfModule mod_myfixip.c&gt;
  RewriteIPResetHeader off
  RewriteIPAllow 10.0.4.0/24
&lt;/IfModule&gt;
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-22.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Apache 재시작
설정을 마친 후에 Apache를 재시작합니다.

``` bash
~# systemctl restart httpd
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-23.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## 최종 접속 테스트
모든 설정을 모두 마친 후에 서버에 접속해봅니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 최종 접속 로그 확인
접속 로그를 다시 확인해보면 이번에는 로드밸런서 IP가 아닌 Client IP가 기록된 것을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-29-1.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 참고 URL

1. Proxy Protocol 설정하기
  - &lt;a href=&quot;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole#proxy-protocol-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole#proxy-protocol&lt;/a&gt;

2. Ubuntu 서버에서 Proxy Protocol을 이용해 Client IP 확인하기
  - &lt;a href=&quot;/networking/ncloud-networking-proxy-protocol-client-ip-logging-ubuntu.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-ubuntu.html&lt;/a&gt;


</description>
            <pubDate>Mon, 18 Apr 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-centos.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-centos.html</guid>
            
            <category>vpc</category>
            
            <category>load_balancer</category>
            
            <category>proxy</category>
            
            
        </item>
        
    </channel>
</rss>
